// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// npx prisma db push

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              Int         @id @default(autoincrement())
  phone           String?     @unique
  email           String?     @unique
  name            String
  avatar          String?
  createAt        DateTime    @default(now())
  updateAt        DateTime    @updatedAt
  // tokens   Token[]
  items           Item[]
  posts           Post[]
  answers         Answer[]
  wondering       Wondering[]
  writtenReviews  Review[]    @relation(name: "writtenReviews")
  receivedReviews Review[]    @relation(name: "receivedReviews")
  favs            Fav[]
  sales           Sale[]
  purchases       Purchase[]
  record          Record[]
  streams         Stream[]
  messages        Message[]
}

model Item {
  id          Int        @id @default(autoincrement())
  createAt    DateTime   @default(now())
  updateAt    DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  image       String
  name        String
  price       Int
  description String     @db.MediumText
  category    String?
  favs        Fav[]
  sales       Sale[]
  purchases   Purchase[]
  records     Record[]

  @@index([userId])
}

model Fav {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  product  Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId   Int
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([userId])
  @@index([itemId])
}

model Post {
  id        Int         @id @default(autoincrement())
  createAt  DateTime    @default(now())
  updateAt  DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  question  String      @db.MediumText
  answers   Answer[]
  wondering Wondering[]
  latitude  Float?
  longitude Float?

  @@index([userId])
}

model Answer {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int
  answer   String   @db.MediumText

  @@index([userId])
  @@index([postId])
}

model Wondering {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int

  @@index([userId])
  @@index([postId])
}

model Review {
  id           Int      @id @default(autoincrement())
  createAt     DateTime @default(now())
  updateAt     DateTime @updatedAt
  review       String   @db.MediumText
  createBy     User     @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  Int
  createFor    User     @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
  score        Int

  @@index([createdById])
  @@index([createdForId])
}

model Sale {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  product  Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId   Int
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([userId])
  @@index([itemId])
}

model Purchase {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  product  Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId   Int
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([userId])
  @@index([itemId])
}

model Record {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  product  Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId   Int
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  kind     Kind

  @@index([userId])
  @@index([itemId])
}

enum Kind {
  Purchase
  Sale
  Fav
}

model Stream {
  id          Int       @id @default(autoincrement())
  createAt    DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  name        String
  description String    @db.MediumText
  price       Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  messages    Message[]

  @@index([userId])
}

model Message {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  message  String   @db.MediumText
  stream   Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId Int

  @@index([userId])
  @@index([streamId])
}

// model Token {
//   id        Int      @id @default(autoincrement())
//   payload   String   @unique
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId    Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([userId])
// }
