// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        Int         @id @default(autoincrement())
  phone     String?     @unique
  email     String?     @unique
  name      String
  avatar    String?
  createAt  DateTime    @default(now())
  updateAt  DateTime    @updatedAt
  // tokens   Token[]
  items     Item[]
  Favs      Fav[]
  posts     Post[]
  answers   Answer[]
  Wondering Wondering[]
}

model Item {
  id          Int      @id @default(autoincrement())
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  image       String
  name        String
  price       Int
  description String   @db.MediumText
  Favs        Fav[]

  @@index([userId])
}

model Fav {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  product  Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId   Int
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([userId])
  @@index([itemId])
}

model Post {
  id        Int         @id @default(autoincrement())
  createAt  DateTime    @default(now())
  updateAt  DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  question  String      @db.MediumText
  answers   Answer[]
  wondering Wondering[]
  latitude  Float?
  longitude Float?

  @@index([userId])
}

model Answer {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int
  answer   String   @db.MediumText

  @@index([userId])
  @@index([postId])
}

model Wondering {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int

  @@index([userId])
  @@index([postId])
}

// model Token {
//   id        Int      @id @default(autoincrement())
//   payload   String   @unique
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId    Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([userId])
// }
